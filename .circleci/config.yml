version: 2

aliases:
  # Workflow filters
  - &filter-only-master
    branches:
      only: master

defaults: &defaults
  working_directory: ~/grafana-influxdb-flux-datasource
  docker:
    - image: circleci/node:10.16.3-stretch

jobs:
  build_plugin:
    <<: *defaults
    steps:
    - checkout
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Install yarn
        command: |
          sudo npm install -g yarn --quiet
          yarn install --pure-lockfile
    - run:
        name: Run Toolkit Build
        command: npx grafana-toolkit plugin:ci-build
    - save_cache:
        paths:
        - node_modules
        key: yarn-packages-{{ checksum "yarn.lock" }}
    - persist_to_workspace:
        root: .
        paths:
        - ci

  build_docs:
    <<: *defaults
    steps:
    - checkout
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Install yarn
        command: |
          sudo npm install -g yarn --quiet
          yarn install --pure-lockfile
          mkdir ci # Avoid error if not exists
    - run:
        name: Build Docs
        command: npx grafana-toolkit plugin:ci-docs
    - save_cache:
        paths:
        - node_modules
        key: yarn-packages-{{ checksum "yarn.lock" }}
    - persist_to_workspace:
        root: .
        paths:
        - ci

  package:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Package Distribution
          command: |
            DATASOURCE_NAME=grafana-influxdb-flux-datasource
            sudo apt-get install jq
            VERSION=`cat dist/plugin.json|jq '.info.version'| sed s/\"//g`
            # create zip file
            cd ~
            echo "Creating ZIP"
            zip \
              -x ${DATASOURCE_NAME}/.git/**\* \
              -x ${DATASOURCE_NAME}/node_modules/**\* \
              -r /tmp/${DATASOURCE_NAME}-${VERSION}.zip \
              ${DATASOURCE_NAME}
            # create tar file
            echo "Creating TAR"
            tar \
              --exclude .git \
              --exclude ${DATASOURCE_NAME}/node_modules \
              -cvf /tmp/${DATASOURCE_NAME}-${VERSION}.tar \
              ${DATASOURCE_NAME}
            gzip /tmp/${DATASOURCE_NAME}-${VERSION}.tar
            # create artifacts and sha
            mkdir -p ~/${DATASOURCE_NAME}/artifacts
            mv /tmp/${DATASOURCE_NAME}-${VERSION}.zip ~/${DATASOURCE_NAME}/artifacts/
            shasum \
              ~/${DATASOURCE_NAME}/artifacts/${DATASOURCE_NAME}-${VERSION}.zip > \
              ~/${DATASOURCE_NAME}/artifacts/${DATASOURCE_NAME}-${VERSION}.zip.sha1
            mv /tmp/${DATASOURCE_NAME}-${VERSION}.tar.gz ~/${DATASOURCE_NAME}/artifacts/
            shasum \
              ~/${DATASOURCE_NAME}/artifacts/${DATASOURCE_NAME}-${VERSION}.tar.gz > \
              ~/${DATASOURCE_NAME}/artifacts/${DATASOURCE_NAME}-${VERSION}.tar.gz.sha1
          no_output_timeout: 5m
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - persist_to_workspace:
          root: .
          paths:
            - artifacts
            - dist
      - store_artifacts:
          path: artifacts
      - store_artifacts:
          path: dist

  report:
    <<: *defaults
    steps:
    - checkout
    - attach_workspace:
        at: .
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Toolkit Report
        command: |
          # skipped - S3 permission issue
          # npx grafana-toolkit plugin:ci-report
    - store_artifacts:
        path: ci

  test_integration:
    <<: *defaults
    docker:
    - image: circleci/node:10-browsers
    steps:
    - checkout
    - attach_workspace:
        at: .
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Setup Grafana (local install)
        command: |
          wget https://dl.grafana.com/oss/release/grafana_6.4.2_amd64.deb
          sudo apt-get install -y adduser libfontconfig1
          sudo dpkg -i grafana_6.4.2_amd64.deb
          sudo apt-get install locate
          sudo updatedb
          sudo locate grafana
          sudo cat /etc/grafana/grafana.ini
          sudo echo ------------------------
          sudo cp ci/grafana-test-env/custom.ini /usr/share/grafana/conf/custom.ini
          sudo cp ci/grafana-test-env/custom.ini /etc/grafana/grafana.ini
          sudo service grafana-server start
          sudo grafana-cli --version
    - run:
        name: Run e2e tests
        command: |
          npx grafana-toolkit plugin:ci-test
    - persist_to_workspace:
        root: .
        paths:
        - ci/jobs/test_integration
    - store_test_results:
        path: ci/jobs/test_integration
    - store_artifacts:
        path: ci/jobs/test_integration

  publish-github-release:
    working_directory: ~/grafana-influxdb-flux-datasource
    docker:
      - image: cibuilds/github:0.13
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "39:06:80:00:ed:ad:b7:76:01:4c:ab:cf:c6:80:3e:fb"
      - attach_workspace:
          at: .
      - run:
          name: "Publish Release on GitHub"
          command: |
            DATASOURCE_NAME=grafana-influxdb-flux-datasource
            apk add --update --no-cache jq
            RELEASE_NOTES=`awk 'BEGIN {FS="##"; RS=""} FNR==3 {print; exit}' CHANGELOG.md`
            VERSION=`cat src/plugin.json|jq '.info.version'| sed s/\"//g`
            ls -al
            ls -al ./artifacts
            git config user.email "eng@grafana.com"
            git config user.name "CircleCI Automation"
            git checkout -b release-${VERSION}
            git add --force dist/
            git add artifacts/
            git commit -m "automated release $VERSION [skip ci]"
            git push -f origin release-${VERSION}
            git tag -f v${VERSION}
            git push -f origin v${VERSION}
            ghr \
              -t ${GITHUB_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -n "${DATASOURCE_NAME} v${VERSION}" \
              -b "${RELEASE_NOTES}" \
              -delete \
              v${VERSION} \
              ./artifacts/

workflows:
  version: 2
  plugin_workflow:
    jobs:
      - build_plugin
      - build_docs
      - package:
          requires:
            - build_plugin
            - build_docs
      - test_integration:
          requires:
            - package
      - report:
          requires:
            - test_integration
      - approve-release:
          type: approval
          requires:
            - report
          filters: *filter-only-master
      - publish-github-release:
          requires:
            - approve-release
          filters: *filter-only-master
