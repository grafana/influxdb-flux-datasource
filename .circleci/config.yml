version: 2

aliases:
  # Workflow filters
  - &filter-only-master
    branches:
      only: master

defaults: &defaults
  working_directory: ~/grafana-influxdb-flux-datasource
  docker:
    - image: circleci/node:10.16.3-stretch

jobs:
  build_plugin:
    <<: *defaults
    steps:
    - checkout
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Install yarn
        command: |
          sudo npm install -g yarn --quiet
          yarn install --pure-lockfile
    - run:
        name: Run Toolkit Build
        command: npx grafana-toolkit plugin:ci-build
    - save_cache:
        paths:
        - node_modules
        key: yarn-packages-{{ checksum "yarn.lock" }}
    - persist_to_workspace:
        root: .
        paths:
        - ci

  build_docs:
    <<: *defaults
    steps:
    - checkout
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Install yarn
        command: |
          sudo npm install -g yarn --quiet
          yarn install --pure-lockfile
          mkdir ci # Avoid error if not exists
    - run:
        name: Build Docs
        command: npx grafana-toolkit plugin:ci-docs
    - save_cache:
        paths:
        - node_modules
        key: yarn-packages-{{ checksum "yarn.lock" }}
    - persist_to_workspace:
        root: .
        paths:
        - ci

  package:
    <<: *defaults
    steps:
    - checkout
    - attach_workspace:
        at: .
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Package Distribution
        command: |
          ls -l ci
          ls -l ci/jobs
          ls -l ci/jobs/build_plugin
          ls -l ci/jobs/build_plugin/dist
          npx grafana-toolkit plugin:ci-package
          echo Build TAR
          DATASOURCE_NAME=grafana-influxdb-flux-datasource
          mkdir -p ci/jobs/build_tar/${DATASOURCE_NAME}
          cp -rp ci/jobs/build_plugin/dist/* ci/jobs/build_tar/${DATASOURCE_NAME}
          ls -al ci/jobs/build_tar
          ls -al ci/jobs/build_tar/${DATASOURCE_NAME}
          cd ci/jobs/build_tar
          ls -al
          sudo apt-get install jq
          VERSION=`cat ${DATASOURCE_NAME}/plugin.json|jq '.info.version'| sed s/\"//g`          # create tar file
          echo "Creating TAR"
          tar \
            -cvf /tmp/${DATASOURCE_NAME}-${VERSION}.tar \
            ${DATASOURCE_NAME}
          gzip /tmp/${DATASOURCE_NAME}-${VERSION}.tar
          mv /tmp/${DATASOURCE_NAME}-${VERSION}.tar.gz ~/${DATASOURCE_NAME}/ci/packages/
          shasum \
            ~/${DATASOURCE_NAME}/ci/packages/${DATASOURCE_NAME}-${VERSION}.tar.gz > \
            ~/${DATASOURCE_NAME}/ci/packages/${DATASOURCE_NAME}-${VERSION}.tar.gz.sha1
    - persist_to_workspace:
        root: .
        paths:
        - ci
    - store_artifacts:
        path: ci/packages

  report:
    <<: *defaults
    steps:
    - checkout
    - attach_workspace:
        at: .
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Toolkit Report
        command: |
          # skipped - S3 permission issue
          # npx grafana-toolkit plugin:ci-report
    - store_artifacts:
        path: ci

  test_integration:
    <<: *defaults
    docker:
    - image: circleci/node:10-browsers
    steps:
    - checkout
    - attach_workspace:
        at: .
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Setup Grafana (local install)
        command: |
          wget https://dl.grafana.com/oss/release/grafana_6.4.2_amd64.deb
          sudo apt-get install -y adduser libfontconfig1
          sudo dpkg -i grafana_6.4.2_amd64.deb
          sudo apt-get install locate
          sudo updatedb
          sudo locate grafana
          sudo cat /etc/grafana/grafana.ini
          sudo echo ------------------------
          sudo cp ci/grafana-test-env/custom.ini /usr/share/grafana/conf/custom.ini
          sudo cp ci/grafana-test-env/custom.ini /etc/grafana/grafana.ini
          sudo service grafana-server start
          sudo grafana-cli --version
    - run:
        name: Run e2e tests
        command: |
          npx grafana-toolkit plugin:ci-test
    - persist_to_workspace:
        root: .
        paths:
        - ci/jobs/test_integration
    - store_test_results:
        path: ci/jobs/test_integration
    - store_artifacts:
        path: ci/jobs/test_integration

  publish-github-release:
    working_directory: ~/grafana-influxdb-flux-datasource
    docker:
      - image: cibuilds/github:0.13
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "39:06:80:00:ed:ad:b7:76:01:4c:ab:cf:c6:80:3e:fb"
      - attach_workspace:
          at: .
      - run:
          name: "Publish Release on GitHub"
          command: |
            DATASOURCE_NAME=grafana-influxdb-flux-datasource
            # copy ci dist
            cp -r ci/jobs/build_plugin/dist .
            # copy ci artifacts
            mkdir -p artifacts
            cp -r ci/packages/* artifacts
            #
            apk add --update --no-cache jq
            RELEASE_NOTES=`awk 'BEGIN {FS="##"; RS=""} FNR==3 {print; exit}' CHANGELOG.md`
            VERSION=`cat dist/plugin.json|jq '.info.version'| sed s/\"//g`
            ls -al
            ls -al ./artifacts
            git config user.email "eng@grafana.com"
            git config user.name "CircleCI Automation"
            git checkout -b release-${VERSION}
            git add --force dist/
            git add artifacts/
            git commit -m "automated release $VERSION [skip ci]"
            git push -f origin release-${VERSION}
            git tag -f v${VERSION}
            git push -f origin v${VERSION}
            ghr \
              -t ${GITHUB_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -n "${DATASOURCE_NAME} v${VERSION}" \
              -b "${RELEASE_NOTES}" \
              -delete \
              v${VERSION} \
              ./artifacts/

workflows:
  version: 2
  plugin_workflow:
    jobs:
      - build_plugin
      - build_docs:
          requires:
            - build_plugin
      - package:
          requires:
            - build_docs
      - test_integration:
          requires:
            - package
      - report:
          requires:
            - test_integration
      - approve-release:
          type: approval
          requires:
            - report
          filters: *filter-only-master
      - publish-github-release:
          requires:
            - approve-release
          filters: *filter-only-master
